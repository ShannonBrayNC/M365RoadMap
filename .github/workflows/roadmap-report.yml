name: Roadmap Report

on:
  workflow_dispatch:
    inputs:
      title:
        description: Output base name (no extension)
        required: false
        default: roadmap_report
      since:
        description: ISO date (YYYY-MM-DD) to include items since
        required: false
        default: ""
      months:
        description: Limit to the last N months (number)
        required: false
        default: ""
      cloud_general:
        description: Include Worldwide (Standard Multi-Tenant)
        type: boolean
        required: false
        default: true
      cloud_gcc:
        description: Include GCC
        type: boolean
        required: false
        default: false
      cloud_gcch:
        description: Include GCC High
        type: boolean
        required: false
        default: false
      cloud_dod:
        description: Include DoD
        type: boolean
        required: false
        default: false
      products:
        description: Comma/pipe/space-separated product keywords (blank = all)
        required: false
        default: ""
      public_ids:
        description: Comma/space-separated exact IDs to force-include (keeps order)
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TITLE: ${{ inputs.title }}
      SINCE: ${{ inputs.since }}
      MONTHS: ${{ inputs.months }}
      CLOUD_GENERAL: ${{ inputs.cloud_general }}
      CLOUD_GCC: ${{ inputs.cloud_gcc }}
      CLOUD_GCCH: ${{ inputs.cloud_gcch }}
      CLOUD_DOD: ${{ inputs.cloud_dod }}
      PRODUCTS: ${{ inputs.products }}
      PUBLIC_IDS: ${{ inputs.public_ids }}
      # Graph cert secrets (set these in repo Settings > Secrets and variables > Actions)
      TENANT: ${{ secrets.TENANT_ID }}
      CLIENT: ${{ secrets.CLIENT_ID }}
      PFX_B64: ${{ secrets.PFX_B64 }}
      M365_PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
      PFX_PASSWORD_ENV: M365_PFX_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas requests msal cryptography beautifulsoup4 lxml feedparser tqdm Markdown
          fi

      - name: Write graph_config.json (from secrets)
        run: |
          cat > graph_config.json <<'JSON'
          {
            "tenant": "${TENANT}",
            "client_id": "${CLIENT}",
            "pfx_base64": "${PFX_B64}"
          }
          JSON
          echo "graph_config.json written."

      - name: Fetch master CSV/JSON via Graph + fallbacks
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output

          CSV_OUT="output/${TITLE}_master.csv"
          JSON_OUT="output/${TITLE}_master.json"
          STATS_OUT="output/${TITLE}_fetch_stats.json"

          CFG=(--config "graph_config.json")

          DATE_FLAGS=()
          [ -n "${SINCE}" ] && DATE_FLAGS+=(--since "${SINCE}")
          [ -n "${MONTHS}" ] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [ "${CLOUD_GENERAL,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [ "${CLOUD_GCC,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC")
          [ "${CLOUD_GCCH,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC High")
          [ "${CLOUD_DOD,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "DoD")

          echo "Running fetch_messages_graph.py with: ${CFG[*]} ${DATE_FLAGS[*]} ${CLOUD_FLAGS[*]}"
          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" \
            --emit csv --out "${CSV_OUT}" --stats-out "${STATS_OUT}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" \
            --emit json --out "${JSON_OUT}"

          echo "csv=${CSV_OUT}"     >> "$GITHUB_OUTPUT"
          echo "json=${JSON_OUT}"   >> "$GITHUB_OUTPUT"
          echo "stats=${STATS_OUT}" >> "$GITHUB_OUTPUT"

      - name: Generate Markdown report
        shell: bash
        run: |
          set -euo pipefail
          IN_CSV="output/${TITLE}_master.csv"
          OUT_MD="output/${TITLE}.md"

          DATE_FLAGS=()
          [ -n "${SINCE}" ] && DATE_FLAGS+=(--since "${SINCE}")
          [ -n "${MONTHS}" ] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [ "${CLOUD_GENERAL,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [ "${CLOUD_GCC,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC")
          [ "${CLOUD_GCCH,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC High")
          [ "${CLOUD_DOD,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "DoD")

          FORCED_ARGS=()
          # Only add --forced-ids if non-empty (avoids argparse errors if an older runner ever picked up)
          [ -n "${PUBLIC_IDS}" ] && FORCED_ARGS+=(--forced-ids "${PUBLIC_IDS}")

          python scripts/generate_report.py \
            --title "${TITLE}" \
            --master "${IN_CSV}" \
            --out "${OUT_MD}" \
            "${DATE_FLAGS[@]}" \
            "${CLOUD_FLAGS[@]}" \
            --products "${PRODUCTS}" \
            "${FORCED_ARGS[@]}"

          echo "md=${OUT_MD}" >> "$GITHUB_OUTPUT"

      - name: Parse MD to CSV/JSON
        run: |
          python scripts/parse_roadmap_markdown.py \
            --input "output/${TITLE}.md" \
            --csv   "output/${TITLE}.csv" \
            --json  "output/${TITLE}.json"

      - name: Render HTML
        run: |
          python scripts/md_to_html.py "output/${TITLE}.md" "output/${TITLE}.html"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.title }}-bundle
          path: |
            output/${{ inputs.title }}.md
            output/${{ inputs.title }}.csv
            output/${{ inputs.title }}.json
            output/${{ inputs.title }}.html
            output/${{ inputs.title }}_master.csv
            output/${{ inputs.title }}_master.json
            output/${{ inputs.title }}_fetch_stats.json
