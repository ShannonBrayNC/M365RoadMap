name: Roadmap Report

on:
  workflow_dispatch:
    inputs:
      title:
        description: Report title / basename for outputs
        required: true
        default: roadmap_report
        type: string
      since:
        description: Only include items last modified on/after (YYYY-MM-DD)
        required: false
        type: string
      months:
        description: Or include items within the last N months
        required: false
        type: string
      cloud_general:
        description: Include Worldwide (Standard Multi-Tenant)
        required: true
        default: true
        type: boolean
      cloud_gcc:
        description: Include GCC
        required: true
        default: false
        type: boolean
      cloud_gcch:
        description: Include GCC High
        required: true
        default: false
        type: boolean
      cloud_dod:
        description: Include DoD
        required: true
        default: false
        type: boolean
      products:
        description: Comma/pipe/semicolon-separated product/workload filter (blank=all)
        required: false
        type: string
      public_ids:
        description: Comma/space-separated Roadmap IDs to force include (exact order)
        required: false
        type: string
      no_graph:
        description: Skip Graph and use fallback only
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      TITLE: ${{ inputs.title }}
      SINCE: ${{ inputs.since }}
      MONTHS: ${{ inputs.months }}
      CLOUD_GENERAL: ${{ inputs.cloud_general }}
      CLOUD_GCC: ${{ inputs.cloud_gcc }}
      CLOUD_GCCH: ${{ inputs.cloud_gcch }}
      CLOUD_DOD: ${{ inputs.cloud_dod }}
      PRODUCTS: ${{ inputs.products }}
      PUBLIC_IDS: ${{ inputs.public_ids }}
      NO_GRAPH: ${{ inputs.no_graph }}

      # Graph secrets (configure these in repo/org secrets)
      TENANT: ${{ secrets.M365_TENANT_ID }}
      CLIENT: ${{ secrets.M365_CLIENT_ID }}
      PFX_B64: ${{ secrets.M365_PFX_BASE64 }}
      M365_PFX_PASSWORD: ${{ secrets.M365_PFX_PASSWORD }}
      PFX_PASSWORD_ENV: M365_PFX_PASSWORD

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install msal cryptography requests pandas Markdown beautifulsoup4 feedparser lxml

      - name: Write graph_config.json
        shell: bash
        run: |
          python - <<'PY'
          import json, os
          cfg = {
            "tenant": os.environ.get("TENANT",""),
            "client_id": os.environ.get("CLIENT",""),
            "pfx_base64": os.environ.get("PFX_B64",""),
            "pfx_password_env": os.environ.get("PFX_PASSWORD_ENV","M365_PFX_PASSWORD"),
          }
          with open("graph_config.json","w",encoding="utf-8") as f:
              json.dump(cfg,f)
          print("graph_config.json written.")
          PY

      - name: Fetch messages (master CSV/JSON)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output
          
          CSV_OUT="output/${TITLE}_master.csv"
          JSON_OUT="output/${TITLE}_master.json"
          STATS_OUT="output/${TITLE}_fetch_stats.json"

          CFG=(--config "graph_config.json")

          DATE_FLAGS=()
          [[ -n "${SINCE}" ]] && DATE_FLAGS+=(--since "${SINCE}")
          [[ -n "${MONTHS}" ]] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [[ "${CLOUD_GENERAL,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [[ "${CLOUD_GCC,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "GCC")
          [[ "${CLOUD_GCCH,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "GCC High")
          [[ "${CLOUD_DOD,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "DoD")

          NOGRAPH_FLAG=()
          [[ "${NO_GRAPH,,}" == "true" ]] && NOGRAPH_FLAG+=(--no-graph)

          echo "Running fetch_messages_graph.py with: ${CFG[*]} ${DATE_FLAGS[*]} ${CLOUD_FLAGS[*]} ${NOGRAPH_FLAG[*]}"
          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOGRAPH_FLAG[@]}" \
            --emit csv --out "${CSV_OUT}" --stats-out "${STATS_OUT}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOGRAPH_FLAG[@]}" \
            --emit json --out "${JSON_OUT}"

          echo "csv=${CSV_OUT}"     >> "$GITHUB_OUTPUT"
          echo "json=${JSON_OUT}"   >> "$GITHUB_OUTPUT"
          echo "stats=${STATS_OUT}" >> "$GITHUB_OUTPUT"

      - name: Show fetch stats
        if: always()
        run: |
          echo "---- fetch stats ----"
          cat "output/${{ env.TITLE }}_fetch_stats.json" || true

      - name: Generate report (MD)
        shell: bash
        run: |
          set -euo pipefail
          IN_CSV="output/${TITLE}_master.csv"
          OUT_MD="output/${TITLE}.md"

          DATE_FLAGS=()
          [[ -n "${SINCE}" ]] && DATE_FLAGS+=(--since "${SINCE}")
          [[ -n "${MONTHS}" ]] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [[ "${CLOUD_GENERAL,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [[ "${CLOUD_GCC,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "GCC")
          [[ "${CLOUD_GCCH,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "GCC High")
          [[ "${CLOUD_DOD,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "DoD")

          FORCED_ARGS=()
          [[ -n "${PUBLIC_IDS}" ]] && FORCED_ARGS+=(--forced-ids "${PUBLIC_IDS}")

          PROD_ARG=()
          [[ -n "${PRODUCTS}" ]] && PROD_ARG+=(--products "${PRODUCTS}")

          python scripts/generate_report.py \
            --title "${TITLE}" \
            --master "${IN_CSV}" \
            --out "${OUT_MD}" \
            "${DATE_FLAGS[@]}" \
            "${CLOUD_FLAGS[@]}" \
            "${PROD_ARG[@]}" \
            "${FORCED_ARGS[@]}"

          echo "md=${OUT_MD}" >> "$GITHUB_OUTPUT"

      - name: Render HTML
        run: |
          python scripts/md_to_html.py "output/${{ env.TITLE }}.md" "output/${{ env.TITLE }}.html"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: roadmap-report-${{ env.TITLE }}
          path: |
            output/${{ env.TITLE }}_master.csv
            output/${{ env.TITLE }}_master.json
            output/${{ env.TITLE }}_fetch_stats.json
            output/${{ env.TITLE }}.md
            output/${{ env.TITLE }}.html
