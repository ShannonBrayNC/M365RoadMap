name: Roadmap Report

on:
  workflow_dispatch:
    inputs:
      title:
        description: Title for report files
        required: true
        default: roadmap_report
      since:
        description: Only include items on/after YYYY-MM-DD
        required: false
        default: ""
      months:
        description: Only include items within last N months
        required: false
        default: ""
      cloud_general:
        description: Include Worldwide (General)
        required: true
        default: "true"
      cloud_gcc:
        description: Include GCC
        required: true
        default: "false"
      cloud_gcch:
        description: Include GCC High
        required: true
        default: "false"
      cloud_dod:
        description: Include DoD
        required: true
        default: "false"
      products:
        description: Comma/pipe-separated product/workload filter; blank = all
        required: false
        default: ""
      public_ids:
        description: Comma-separated exact PublicId list to force/include (ordered)
        required: false
        default: ""
      no_graph:
        description: Skip Graph (fallback-only)
        required: false
        default: "false"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests markdown pandas msal pyjwt cryptography feedparser lxml beautifulsoup4
          fi

      - name: Prepare graph_config.json (optional creds)
        run: |
          set -euo pipefail
          cat > graph_config.json <<'JSON'
          {
            "TENANT":   "${{ secrets.M365_TENANT_ID || '' }}",
            "CLIENT":   "${{ secrets.M365_CLIENT_ID  || '' }}",
            "PFX_B64":  "${{ secrets.M365_PFX_BASE64 || '' }}",
            "M365_PFX_PASSWORD": "M365_PFX_PASSWORD",
            "public_json_url": "",
            "public_rss_url": ""
          }
          JSON
          echo "graph_config.json written."
          if [ -n "${{ secrets.M365_PFX_PASSWORD }}" ]; then
            echo "M365_PFX_PASSWORD=${{ secrets.M365_PFX_PASSWORD }}" >> $GITHUB_ENV
          fi

      - name: Fetch messages (Graph → fallback → seed)
        env:
          TITLE: ${{ inputs.title }}
          SINCE: ${{ inputs.since }}
          MONTHS: ${{ inputs.months }}
          CLOUD_GENERAL: ${{ inputs.cloud_general }}
          CLOUD_GCC: ${{ inputs.cloud_gcc }}
          CLOUD_GCCH: ${{ inputs.cloud_gcch }}
          CLOUD_DOD: ${{ inputs.cloud_dod }}
          NO_GRAPH: ${{ inputs.no_graph }}
          PUBLIC_IDS: ${{ inputs.public_ids }}
        run: |
          set -euo pipefail
          mkdir -p output
          CSV_OUT="output/${TITLE}_master.csv"
          JSON_OUT="output/${TITLE}_master.json"
          STATS_OUT="output/${TITLE}_fetch_stats.json"

          CFG=(--config "graph_config.json")
          DATE_FLAGS=()
          [[ -n "${SINCE}"  ]] && DATE_FLAGS+=(--since  "${SINCE}")
          [[ -n "${MONTHS}" ]] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [[ "${CLOUD_GENERAL,,}" == "true" ]] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [[ "${CLOUD_GCC,,}"     == "true" ]] && CLOUD_FLAGS+=(--cloud "GCC")
          [[ "${CLOUD_GCCH,,}"    == "true" ]] && CLOUD_FLAGS+=(--cloud "GCC High")
          [[ "${CLOUD_DOD,,}"     == "true" ]] && CLOUD_FLAGS+=(--cloud "DoD")

          NOGRAPH=()
          [[ "${NO_GRAPH,,}" == "true" ]] && NOGRAPH+=(--no-graph)

          SEED_ARGS=()
          [[ -n "${PUBLIC_IDS}" ]] && SEED_ARGS+=(--seed-ids "${PUBLIC_IDS}")

          echo "Running fetch_messages_graph.py with: ${CFG[*]} ${DATE_FLAGS[*]} ${CLOUD_FLAGS[*]} ${NOGRAPH[*]} ${SEED_ARGS[*]}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOGRAPH[@]}" "${SEED_ARGS[@]}" \
            --emit csv --out "${CSV_OUT}" --stats-out "${STATS_OUT}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOGRAPH[@]}" "${SEED_ARGS[@]}" \
            --emit json --out "${JSON_OUT}"

          echo "csv=${CSV_OUT}"     >> "$GITHUB_OUTPUT"
          echo "json=${JSON_OUT}"   >> "$GITHUB_OUTPUT"
          echo "stats=${STATS_OUT}" >> "$GITHUB_OUTPUT"

      - name: Debug master outputs
        if: always()
        run: |
          echo "---- output dir ----"
          ls -l output || true
          echo "---- head master.csv ----"
          head -n 10 "output/${{ inputs.title }}_master.csv" || true
          echo "---- fetch stats ----"
          cat "output/${{ inputs.title }}_fetch_stats.json" || true

      - name: Generate markdown report
        run: bash scripts/run_generate_report.sh
        env:
          TITLE: ${{ inputs.title }}
          SINCE: ${{ inputs.since }}
          MONTHS: ${{ inputs.months }}
          CLOUD_GENERAL: ${{ inputs.cloud_general }}
          CLOUD_GCC: ${{ inputs.cloud_gcc }}
          CLOUD_GCCH: ${{ inputs.cloud_gcch }}
          CLOUD_DOD: ${{ inputs.cloud_dod }}
          PRODUCTS: ${{ inputs.products }}
          PUBLIC_IDS: ${{ inputs.public_ids }}


      - name: Convert MD -> HTML
        run: |
          python scripts/md_to_html.py "output/${{ inputs.title }}.md" "output/${{ inputs.title }}.html"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.title }}-artifacts
          path: |
            output/${{ inputs.title }}_master.csv
            output/${{ inputs.title }}_master.json
            output/${{ inputs.title }}_fetch_stats.json
            output/${{ inputs.title }}.md
            output/${{ inputs.title }}.html
