name: Generate Microsoft 365 Roadmap Report

on:
  workflow_dispatch:
    inputs:
      skip_generate:
        description: "Skip API generation and use sample file (first-run safe)"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      test_discovery:
        description: "Discovery Test Mode: only fetch IDs and upload CSV (no report generation)"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]
      ids:
        description: "Comma-separated Roadmap IDs (leave blank to auto-discover by filters)"
        required: false
        default: ""
      report_title:
        description: "Title for output files (no spaces)"
        required: false
        default: "roadmap_report"
      model:
        description: "OpenAI model (default: gpt-4o; you can override to gpt-5)"
        required: false
        default: "gpt-4o"
      months:
        description: "Months back from today to include (1..6) OR leave blank to use since/until"
        required: false
        default: "3"
      since:
        description: "Start date (YYYY-MM-DD). If set and 'until' blank, defaults to +6 months."
        required: false
        default: ""
      until:
        description: "End date (YYYY-MM-DD)"
        required: false
        default: ""
      include_instances:
        description: "Include Cloud Instances (e.g., DoD,GCC,GCC High,Worldwide (Standard Multi-Tenant))"
        required: false
        default: ""
      exclude_instances:
        description: "Exclude Cloud Instances (comma-separated)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requirements (if requirements.txt exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -f requirements.txt ]]; then
            python -m pip install --upgrade pip wheel
            pip install -r requirements.txt
          else
            echo "No requirements.txt found. Skipping pip install."
          fi

      - name: Make scripts executable & normalize line endings
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update && sudo apt-get install -y dos2unix
          if compgen -G "scripts/*.sh" > /dev/null; then dos2unix scripts/*.sh || true; chmod +x scripts/*.sh; fi
          if [[ -f scripts/fetch_ids.py ]]; then dos2unix scripts/fetch_ids.py || true; chmod +x scripts/fetch_ids.py; fi
          if [[ -f scripts/write_sample.sh ]]; then dos2unix scripts/write_sample.sh || true; chmod +x scripts/write_sample.sh; fi

      - name: Ensure sample report exists (first-run safety)
        if: ${{ github.event.inputs.skip_generate == 'true' }}
        shell: bash
        env:
          TITLE: ${{ github.event.inputs.report_title || 'roadmap_report' }}
        run: |
          set -euxo pipefail
          mkdir -p output
          if [[ ! -f "output/${TITLE}.md" ]]; then
            bash scripts/write_sample.sh "output/${TITLE}.md"
          else
            echo "Sample already present at output/${TITLE}.md; skipping."
          fi

          
      - name: Auto-discover Roadmap IDs (multi-pass, writes CSV via --out)
        if: ${{ github.event.inputs.skip_generate == 'false' && (github.event.inputs.ids == '' || github.event.inputs.ids == null) }}
        id: discover
        shell: bash
        env:
          MONTHS: ${{ github.event.inputs.months }}
          SINCE: ${{ github.event.inputs.since }}
          UNTIL: ${{ github.event.inputs.until }}
          INCLUDE: ${{ github.event.inputs.include_instances }}
          EXCLUDE: ${{ github.event.inputs.exclude_instances }}
          TITLE: ${{ github.event.inputs.report_title || 'roadmap_report' }}
        run: |
          set -euo pipefail
          mkdir -p output

          # Helpers that OMIT empty flags
          run_discovery_list () {
            local months="$1" since="$2" until="$3" include="$4" exclude="$5"
            cmd=(python scripts/fetch_ids.py --emit list --max-items 0 --debug)
            [[ -n "$months" ]] && cmd+=(--months "$months")
            [[ -n "$since"  ]] && cmd+=(--since "$since")
            [[ -n "$until"  ]] && cmd+=(--until "$until")
            [[ -n "$include" ]] && cmd+=(--include "$include")
            [[ -n "$exclude" ]] && cmd+=(--exclude "$exclude")
            "${cmd[@]}"
          }

          run_discovery_csv () {
            local months="$1" since="$2" until="$3" include="$4" exclude="$5" outpath="$6"
            cmd=(python scripts/fetch_ids.py --emit csv --out "$outpath" --max-items 0 --debug)
            [[ -n "$months" ]] && cmd+=(--months "$months")
            [[ -n "$since"  ]] && cmd+=(--since "$since")
            [[ -n "$until"  ]] && cmd+=(--until "$until")
            [[ -n "$include" ]] && cmd+=(--include "$include")
            [[ -n "$exclude" ]] && cmd+=(--exclude "$exclude")
            "${cmd[@]}"
          }

          # Pass A: your filters
          M_USED="${MONTHS:-}"; S_USED="${SINCE:-}"; U_USED="${UNTIL:-}"; I_USED="${INCLUDE:-}"; E_USED="${EXCLUDE:-}"
          echo "Pass A months='${M_USED}' since='${S_USED}' until='${U_USED}' include='${I_USED}' exclude='${E_USED}'"
          IDS="$(run_discovery_list "${M_USED}" "${S_USED}" "${U_USED}" "${I_USED}" "${E_USED}" || true)"
          echo "Pass A IDs: ${IDS}"

          # Pass B: drop instance
          if [[ -z "${IDS}" ]]; then
            I_USED=""
            echo "Pass B (drop instance) months='${M_USED}' since='${S_USED}' until='${U_USED}'"
            IDS="$(run_discovery_list "${M_USED}" "${S_USED}" "${U_USED}" "${I_USED}" "${E_USED}" || true)"
            echo "Pass B IDs: ${IDS}"
          fi

          # Pass C: drop dates as well
          if [[ -z "${IDS}" ]]; then
            M_USED=""; S_USED=""; U_USED=""
            echo "Pass C (drop dates) include='${I_USED:-}' exclude='${E_USED:-}'"
            IDS="$(run_discovery_list "${M_USED}" "${S_USED}" "${U_USED}" "${I_USED}" "${E_USED}" || true)"
            echo "Pass C IDs: ${IDS}"
          fi

          # Always write a CSV for whatever pass we ended on
          CSV_OUT="output/${TITLE}_discovered_ids.csv"
          echo "Writing discovery CSV to ${CSV_OUT}"
          run_discovery_csv "${M_USED}" "${S_USED}" "${U_USED}" "${I_USED}" "${E_USED}" "${CSV_OUT}" || true

          # Export ids for downstream (may be empty)
          echo "ids=${IDS}" >> "$GITHUB_OUTPUT"
          if [[ -n "${IDS}" ]]; then
            echo "✅ Discovery succeeded."
          else
            echo "⚠️ Discovery found no IDs with any pass."
          fi


      - name: Upload discovery CSV (always)
        uses: actions/upload-artifact@v4
        with:
          name: roadmap-discovery-${{ github.run_attempt }}
          path: output/${{ github.event.inputs.report_title || 'roadmap_report' }}_discovered_ids.csv
          if-no-files-found: warn
          overwrite: true


      - name: Generate Markdown report via API (only if we have IDs)
        if: ${{ github.event.inputs.skip_generate == 'false' && github.event.inputs.test_discovery != 'true' }}
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          OPENAI_MODEL: ${{ github.event.inputs.model || 'gpt-4o' }}
          OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
        run: |
          set -euxo pipefail

          # Get IDs: manual input wins; otherwise use discovery output
          RAW_IDS="${{ github.event.inputs.ids }}"
          if [[ -z "$RAW_IDS" ]]; then
            RAW_IDS="${{ steps.discover.outputs.ids }}"
          fi
          if [[ -z "$RAW_IDS" ]]; then
            echo "ℹ️ No IDs; skipping generation." >&2
            exit 0
          fi

          TITLE="${{ github.event.inputs.report_title || 'roadmap_report' }}"
          mkdir -p output
          rm -f "output/${TITLE}.md"

          echo "Using IDs: $RAW_IDS"
          bash scripts/generate_report.sh "$RAW_IDS" "prompts/system_multi_id.md" "output/${TITLE}.md"

          # quick sanity peek
          echo "----- HEAD output/${TITLE}.md -----"
          head -n 40 "output/${TITLE}.md" || true
          echo "-----------------------------------"

      - name: Validate generated report (strict)
        if: ${{ github.event.inputs.skip_generate == 'false' && github.event.inputs.test_discovery != 'true' }}
        shell: bash
        env:
          TITLE: ${{ github.event.inputs.report_title || 'roadmap_report' }}
        run: |
          set -euo pipefail
          python scripts/validate_report.py --input "output/${TITLE}.md" --check-deep-dive




      - name: Show first lines of markdown (debug)
        if: ${{ always() }}
        shell: bash
        env:
          TITLE: ${{ github.event.inputs.report_title || 'roadmap_report' }}
        run: |
          set -euo pipefail
          if [[ -f "output/${TITLE}.md" ]]; then
            head -n 80 "output/${TITLE}.md"
          else
            echo "File not found: output/${TITLE}.md"
          fi



      - name: Post-process to CSV/JSON (always runs)
        shell: bash
        env:
          TITLE: ${{ github.event.inputs.report_title || 'roadmap_report' }}
          MONTHS: ${{ github.event.inputs.months }}
          SINCE: ${{ github.event.inputs.since }}
          UNTIL: ${{ github.event.inputs.until }}
          INCLUDE: ${{ github.event.inputs.include_instances }}
          EXCLUDE: ${{ github.event.inputs.exclude_instances }}
        run: |
          set -euxo pipefail
          bash scripts/post_process.sh \
            "output/${TITLE}.md" \
            "output/${TITLE}.csv" \
            "output/${TITLE}.json" \
            "${{ github.event.inputs.months }}" \
            "${{ github.event.inputs.since }}" \
            "${{ github.event.inputs.until }}" \
            "${{ github.event.inputs.include_instances }}" \
            "${{ github.event.inputs.exclude_instances }}"

      - name: Show output directory (debug)
        shell: bash
        run: |
          set -euxo pipefail
          echo "Listing output/"
          ls -la output || true

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: roadmap-report-${{ github.run_attempt }}
          path: |
            output/${{ github.event.inputs.report_title || 'roadmap_report' }}.md
            output/${{ github.event.inputs.report_title || 'roadmap_report' }}.csv
            output/${{ github.event.inputs.report_title || 'roadmap_report' }}.json
            output/*
          if-no-files-found: warn
          overwrite: true