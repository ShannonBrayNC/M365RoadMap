name: Roadmap Report

on:
  workflow_dispatch:
    inputs:
      TITLE:
        description: Base name for output files (no extension)
        required: false
        default: roadmap_report
      PUBLIC_IDS:
        description: Comma-separated Roadmap IDs to force include
        required: false
        default: ""
      MONTHS:
        description: Lookback window in months (leave blank for none)
        required: false
        default: ""
      SINCE:
        description: ISO date (YYYY-MM-DD) to start from (overrides months; blank for none)
        required: false
        default: ""
      NO_WINDOW:
        description: Exclude items with delivery windows (true/false)
        required: false
        default: "true"
      CLOUD_GENERAL:
        description: Include Worldwide (General)
        required: false
        default: "true"
      CLOUD_GCC:
        description: Include GCC
        required: false
        default: "false"
      CLOUD_GCCH:
        description: Include GCC High
        required: false
        default: "false"
      CLOUD_DOD:
        description: Include DoD
        required: false
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # Inputs
      TITLE: ${{ inputs.TITLE }}
      PUBLIC_IDS: ${{ inputs.PUBLIC_IDS }}
      MONTHS: ${{ inputs.MONTHS }}
      SINCE: ${{ inputs.SINCE }}
      NO_WINDOW: ${{ inputs.NO_WINDOW }}
      CLOUD_GENERAL: ${{ inputs.CLOUD_GENERAL }}
      CLOUD_GCC: ${{ inputs.CLOUD_GCC }}
      CLOUD_GCCH: ${{ inputs.CLOUD_GCCH }}
      CLOUD_DOD: ${{ inputs.CLOUD_DOD }}

      # Graph secrets
      TENANT: ${{ secrets.GRAPH_TENANT_ID }}
      CLIENT: ${{ secrets.GRAPH_CLIENT_ID }}
      PFX_B64: ${{ secrets.M365_PFX_BASE64 }}
      M365_PFX_PASSWORD: ${{ secrets.M365_PFX_PASSWORD }}
      PFX_PASSWORD_ENV: M365_PFX_PASSWORD

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 lxml msal cryptography pandas markdown
          fi

      - name: Prepare graph_config.json (no heredocs)
        id: graphcfg
        run: |
          set -euo pipefail
          # Writes graph_config.json if secrets are present; harmless no-op otherwise
          python scripts/ci_write_graph_config.py --out graph_config.json || true
          if [ -f graph_config.json ]; then
            echo "graph_cfg=graph_config.json" >> "$GITHUB_OUTPUT"
          else
            echo "graph_cfg=" >> "$GITHUB_OUTPUT"
          fi

      - name: Fetch master data (Graph/Public/RSS)
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output
          CSV_OUT="output/${TITLE}_master.csv"
          JSON_OUT="output/${TITLE}_master.json"
          STATS_OUT="output/${TITLE}_fetch_stats.json"

          CFG=()
          [ -n "${{ steps.graphcfg.outputs.graph_cfg }}" ] && CFG=(--config "${{ steps.graphcfg.outputs.graph_cfg }}")

          DATE_FLAGS=()
          [ -n "${SINCE}" ] && DATE_FLAGS+=(--since "${SINCE}")
          [ -n "${MONTHS}" ] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [ "${CLOUD_GENERAL,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [ "${CLOUD_GCC,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC")
          [ "${CLOUD_GCCH,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC High")
          [ "${CLOUD_DOD,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "DoD")

          NOWINDOW_FLAG=()
          [ "${NO_WINDOW,,}" = "true" ] && NOWINDOW_FLAG=(--no-window)

          echo "Running fetch_messages_graph.py with: ${CFG[*]} ${DATE_FLAGS[*]} ${CLOUD_FLAGS[*]} ${NOWINDOW_FLAG[*]}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOWINDOW_FLAG[@]}" \
            --emit csv --out "${CSV_OUT}" --stats-out "${STATS_OUT}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOWINDOW_FLAG[@]}" \
            --emit json --out "${JSON_OUT}"

          echo "csv=${CSV_OUT}"     >> "$GITHUB_OUTPUT"
          echo "json=${JSON_OUT}"   >> "$GITHUB_OUTPUT"
          echo "stats=${STATS_OUT}" >> "$GITHUB_OUTPUT"

      - name: Generate Markdown report (scaffolded per-feature)
        id: gen
        shell: bash
        run: |
          set -euo pipefail
          IN_CSV="${{ steps.fetch.outputs.csv }}"
          OUT_MD="output/${TITLE}.md"

          DATE_FLAGS=()
          [ -n "${SINCE}" ] && DATE_FLAGS+=(--since "${SINCE}")
          [ -n "${MONTHS}" ] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [ "${CLOUD_GENERAL,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [ "${CLOUD_GCC,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC")
          [ "${CLOUD_GCCH,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC High")
          [ "${CLOUD_DOD,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "DoD")

          NOWINDOW_FLAG=()
          [ "${NO_WINDOW,,}" = "true" ] && NOWINDOW_FLAG=(--no-window)

          python scripts/generate_report.py \
            --title "${TITLE}" \
            --master "${IN_CSV}" \
            --out "${OUT_MD}" \
            "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOWINDOW_FLAG[@]}" \
            --forced-ids "${PUBLIC_IDS}"

          echo "md=${OUT_MD}" >> "$GITHUB_OUTPUT"

      - name: Convert Markdown â†’ CSV/JSON
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          IN_MD="output/${TITLE}.md"
          [ -f "${IN_MD}" ] || exit 0
          OUT_CSV="output/${TITLE}.csv"
          OUT_JSON="output/${TITLE}.json"
          python scripts/parse_roadmap_markdown.py \
            --input "${IN_MD}" \
            --csv   "${OUT_CSV}" \
            --json  "${OUT_JSON}" \
            --months "${MONTHS}" \
            --since  "${SINCE}"

      - name: Render HTML
        if: always()
        run: |
          set -euo pipefail
          IN_MD="output/${TITLE}.md"
          [ -f "${IN_MD}" ] || exit 0
          python scripts/md_to_html.py --input "${IN_MD}" --out "output/${TITLE}.html"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.TITLE }}
          if-no-files-found: warn
          path: |
            output/${{ inputs.TITLE }}.md
            output/${{ inputs.TITLE }}.csv
            output/${{ inputs.TITLE }}.json
            output/${{ inputs.TITLE }}.html
            output/${{ inputs.TITLE }}_master.csv
            output/${{ inputs.TITLE }}_master.json
            output/${{ inputs.TITLE }}_fetch_stats.json
            output/*

      - name: Write fetch stats to job summary
        if: always()
        env:
          STATS: ${{ steps.fetch.outputs.stats }}
        run: |
          set -euo pipefail
          {
            echo "## Fetch Stats"
            if [[ -n "${STATS:-}" && -f "$STATS" ]]; then
              python scripts/write_fetch_stats_summary.py "$STATS"
            else
              echo "_No stats file produced._"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
