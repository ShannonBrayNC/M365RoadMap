name: Roadmap Report

on:
  workflow_dispatch:
    inputs:
      TITLE:
        description: Base name for output files (no extension)
        required: false
        default: roadmap_report
      PUBLIC_IDS:
        description: Comma-separated Roadmap IDs to force include (optional)
        required: false
        default: ""
      MONTHS:
        description: Lookback window in months (leave blank for none)
        required: false
        default: ""
      SINCE:
        description: ISO date (YYYY-MM-DD) to start from (overrides months; blank for none)
        required: false
        default: ""
      NO_WINDOW:
        description: Disable date window entirely
        required: false
        type: boolean
        default: false
      CLOUD_GENERAL:
        description: Include Worldwide (Standard Multi-Tenant) in banner
        required: false
        type: boolean
        default: true
      CLOUD_GCC:
        description: Include GCC in banner
        required: false
        type: boolean
        default: false
      CLOUD_GCCH:
        description: Include GCC High in banner
        required: false
        type: boolean
        default: false
      CLOUD_DOD:
        description: Include DoD in banner
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TENANT:            ${{ secrets.GRAPH_TENANT_ID }}
      CLIENT:            ${{ secrets.GRAPH_CLIENT_ID }}
      PFX_B64:           ${{ secrets.M365_PFX_BASE64 }}
      PFX_PASSWORD_ENV:  M365_PFX_PASSWORD
      M365_PFX_PASSWORD: ${{ secrets.M365_PFX_PASSWORD }}

      TITLE:            ${{ github.event.inputs.TITLE }}
      PUBLIC_IDS:       ${{ github.event.inputs.PUBLIC_IDS }}
      MONTHS:           ${{ github.event.inputs.MONTHS }}
      SINCE:            ${{ github.event.inputs.SINCE }}
      NO_WINDOW:        ${{ github.event.inputs.NO_WINDOW }}
      CLOUD_GENERAL:    ${{ github.event.inputs.CLOUD_GENERAL }}
      CLOUD_GCC:        ${{ github.event.inputs.CLOUD_GCC }}
      CLOUD_GCCH:       ${{ github.event.inputs.CLOUD_GCCH }}
      CLOUD_DOD:        ${{ github.event.inputs.CLOUD_DOD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare Graph config (no heredocs)
        run: |
          python -m scripts.ci_write_graph_config

      - name: Fetch master data (Graph/Public/RSS)
        id: fetch
        run: |
          set -euo pipefail
          mkdir -p output
          CSV_OUT="output/${TITLE}_master.csv"
          JSON_OUT="output/${TITLE}_master.json"
          STATS_OUT="output/${TITLE}_fetch_stats.json"

          DATE_FLAGS=()
          if [[ -n "${SINCE}" ]]; then
            DATE_FLAGS+=( --since "${SINCE}" )
          elif [[ -n "${MONTHS}" ]]; then
            DATE_FLAGS+=( --months "${MONTHS}" )
          fi

          python scripts/fetch_messages_graph.py \
            "${DATE_FLAGS[@]}" \
            --emit csv --out "${CSV_OUT}" \
            --stats-out "${STATS_OUT}"

          python scripts/fetch_messages_graph.py \
            "${DATE_FLAGS[@]}" \
            --emit json --out "${JSON_OUT}"

          echo "csv=${CSV_OUT}"     >> "$GITHUB_OUTPUT"
          echo "json=${JSON_OUT}"   >> "$GITHUB_OUTPUT"
          echo "stats=${STATS_OUT}" >> "$GITHUB_OUTPUT"

      - name: Generate Markdown report
        run: |
          python -m scripts.ci_generate_report \
            --title "${TITLE}" \
            --master "${{ steps.fetch.outputs.csv }}" \
            --out "output/${TITLE}.md"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TITLE }}
          if-no-files-found: warn
          path: |
            output/${{ env.TITLE }}.md
            ${{ steps.fetch.outputs.csv }}
            ${{ steps.fetch.outputs.json }}
            ${{ steps.fetch.outputs.stats }}
            output/*
