name: Roadmap Report

on:
  workflow_dispatch:
    inputs:
      title:
        description: Title for report files
        required: true
        default: roadmap_report
      since:
        description: Only include items on/after YYYY-MM-DD
        required: false
        default: ""
      months:
        description: Only include items within last N months
        required: false
        default: ""
      cloud_general:
        description: Include Worldwide (General)
        required: true
        default: "true"
      cloud_gcc:
        description: Include GCC
        required: true
        default: "false"
      cloud_gcch:
        description: Include GCC High
        required: true
        default: "false"
      cloud_dod:
        description: Include DoD
        required: true
        default: "false"
      products:
        description: Comma/pipe-separated product/workload filter; blank = all
        required: false
        default: ""
      public_ids:
        description: Comma-separated exact PublicId list to force/include (ordered)
        required: false
        default: ""
      no_graph:
        description: Skip Graph (fallback-only)
        required: false
        default: "false"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install msal cryptography requests markdown feedparser beautifulsoup4 lxml pandas openai  

            - name: Prepare graph_config.json (Graph creds)
              shell: bash
              run: |
                set -euo pipefail

                # Export the password secret to an env var for the run
                if [ -n "${{ secrets.M365_PFX_PASSWORD }}" ]; then
                  echo "M365_PFX_PASSWORD=${{ secrets.M365_PFX_PASSWORD }}" >> "$GITHUB_ENV"
                fi

                # Write config with the field names fetch_messages_graph.py expects
                cat > graph_config.json <<'JSON'
                {
                  "tenant":            ${{ toJSON(secrets.M365_TENANT_ID) }},
                  "client":            ${{ toJSON(secrets.M365_CLIENT_ID) }},
                  "pfx_b64":           ${{ toJSON(secrets.M365_PFX_BASE64) }},
                  "pfx_password_env":  "M365_PFX_PASSWORD",
                  "graph_base":        "https://graph.microsoft.com"
                }
                JSON

                echo "graph_config.json written:"
                cat graph_config.json | sed 's/"pfx_b64":.*/"pfx_b64":"***redacted***",/'

      - name: Verify Graph deps
        run: |
          python - <<'PY'
          import sys
          import msal, cryptography
          print("msal:", msal.__version__)
          from cryptography.hazmat.primitives.serialization import pkcs12
          print("cryptography OK")
          PY


      - name: Validate PFX (optional)
        shell: bash
        run: |
          python - <<'PY'
          import json, os, base64, sys
          from cryptography.hazmat.primitives.serialization import pkcs12
          from cryptography.hazmat.backends import default_backend
          cfg = json.load(open("graph_config.json"))
          pfx = base64.b64decode(cfg["pfx_b64"])
          pwd = os.getenv(cfg["pfx_password_env"]) or ""
          try:
              key, cert, chain = pkcs12.load_key_and_certificates(pfx, pwd.encode(), default_backend())
              print("PFX OK. Subject:", cert.subject.rfc4514_string())
          except Exception as e:
              print("PFX invalid:", e)
              sys.exit(1)
          PY


      - name: Prepare graph_config.json (Graph creds + public fallbacks)
        shell: bash
        run: |
          set -euo pipefail
          cat > graph_config.json <<'JSON'
          {
            // lower-case (new loader)
            "tenant": "${{ secrets.M365_TENANT_ID || '' }}",
            "client": "${{ secrets.M365_CLIENT_ID  || '' }}",
            "pfx_base64": "${{ secrets.M365_PFX_BASE64 || '' }}",
            "pfx_password_env": "M365_PFX_PASSWORD",

            // UPPER-CASE (old loader compatibility)
            "TENANT": "${{ secrets.M365_TENANT_ID || '' }}",
            "CLIENT": "${{ secrets.M365_CLIENT_ID  || '' }}",
            "PFX_B64": "${{ secrets.M365_PFX_BASE64 || '' }}",
            "M365_PFX_PASSWORD": "M365_PFX_PASSWORD",

            // Optional public sources (RSS will work even if Graph is down)
            "public_rss_url": "https://www.microsoft.com/en-us/microsoft-365/RoadmapFeatureRSS?filters=&searchterms=",
            "public_json_url": ""
          }
          JSON
          echo "graph_config.json written."

          # Export the PFX password so the script can read it by name
          if [ -n "${{ secrets.M365_PFX_PASSWORD }}" ]; then
            echo "M365_PFX_PASSWORD=${{ secrets.M365_PFX_PASSWORD }}" >> "$GITHUB_ENV"
          fi


      - name: Fetch messages (Graph → fallback → seed)
        env:
          DEBUG: "1"
          TITLE: ${{ inputs.title }}
          SINCE: ${{ inputs.since }}
          MONTHS: ${{ inputs.months }}
          CLOUD_GENERAL: ${{ inputs.cloud_general }}
          CLOUD_GCC: ${{ inputs.cloud_gcc }}
          CLOUD_GCCH: ${{ inputs.cloud_gcch }}
          CLOUD_DOD: ${{ inputs.cloud_dod }}
          NO_GRAPH: ${{ inputs.no_graph }}
          PUBLIC_IDS: ${{ inputs.public_ids }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output
          CSV_OUT="output/${TITLE}_master.csv"
          JSON_OUT="output/${TITLE}_master.json"
          STATS_OUT="output/${TITLE}_fetch_stats.json"

          CFG=(--config "graph_config.json")

          DATE_FLAGS=()
          [ -n "${SINCE}" ] && DATE_FLAGS+=(--since "${SINCE}")
          [ -n "${MONTHS}" ] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [ "${CLOUD_GENERAL,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [ "${CLOUD_GCC,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC")
          [ "${CLOUD_GCCH,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC High")
          [ "${CLOUD_DOD,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "DoD")

          NOGRAPH=()
          [ "${NO_GRAPH,,}" = "true" ] && NOGRAPH+=(--no-graph)

          SEED_ARGS=()
          [ -n "${PUBLIC_IDS}" ] && SEED_ARGS+=(--seed-ids "${PUBLIC_IDS}")

          echo "Running fetch_messages_graph.py with: ${CFG[*]} ${DATE_FLAGS[*]} ${CLOUD_FLAGS[*]} ${NOGRAPH[*]} ${SEED_ARGS[*]}"
          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOGRAPH[@]}" "${SEED_ARGS[@]}" \
            --emit csv --out "${CSV_OUT}" --stats-out "${STATS_OUT}"

          python scripts/fetch_messages_graph.py \
            "${CFG[@]}" "${DATE_FLAGS[@]}" "${CLOUD_FLAGS[@]}" "${NOGRAPH[@]}" "${SEED_ARGS[@]}" \
            --emit json --out "${JSON_OUT}"

          echo "csv=${CSV_OUT}"     >> "$GITHUB_OUTPUT"
          echo "json=${JSON_OUT}"   >> "$GITHUB_OUTPUT"
          echo "stats=${STATS_OUT}" >> "$GITHUB_OUTPUT"


      - name: Debug master outputs
        if: always()
        run: |
          echo "---- output dir ----"
          ls -l output || true
          echo "---- head master.csv ----"
          head -n 10 "output/${{ inputs.title }}_master.csv" || true
          echo "---- fetch stats ----"
          cat "output/${{ inputs.title }}_fetch_stats.json" || true


          echo "---- rows in master ----"
          wc -l "output/${{ inputs.title }}_master.csv" || true
          echo "---- head ----"
          head -n 5 "output/${{ inputs.title }}_master.csv" || true

          
      - name: Generate markdown report
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TITLE: ${{ inputs.title }}
          SINCE: ${{ inputs.since }}
          MONTHS: ${{ inputs.months }}
          CLOUD_GENERAL: ${{ inputs.cloud_general }}
          CLOUD_GCC: ${{ inputs.cloud_gcc }}
          CLOUD_GCCH: ${{ inputs.cloud_gcch }}
          CLOUD_DOD: ${{ inputs.cloud_dod }}
          PRODUCTS: ${{ inputs.products }}
          PUBLIC_IDS: ${{ inputs.public_ids }}
        run: |
          set -euo pipefail
          IN_CSV="output/${TITLE}_master.csv"
          OUT_MD="output/${TITLE}.md"

          DATE_FLAGS=()
          [ -n "${SINCE}" ] && DATE_FLAGS+=(--since "${SINCE}")
          [ -n "${MONTHS}" ] && DATE_FLAGS+=(--months "${MONTHS}")

          CLOUD_FLAGS=()
          [ "${CLOUD_GENERAL,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "Worldwide (Standard Multi-Tenant)")
          [ "${CLOUD_GCC,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC")
          [ "${CLOUD_GCCH,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "GCC High")
          [ "${CLOUD_DOD,,}" = "true" ] && CLOUD_FLAGS+=(--cloud "DoD")

          FORCED_ARGS=()
          [ -n "${PUBLIC_IDS}" ] && FORCED_ARGS+=(--forced-ids "${PUBLIC_IDS}")

          python scripts/generate_report.py \
            --title "${TITLE}" \
            --master "${IN_CSV}" \
            --out "${OUT_MD}" \
            "${DATE_FLAGS[@]}" \
            "${CLOUD_FLAGS[@]}" \
            --products "${PRODUCTS}" \
            "${FORCED_ARGS[@]}"

          echo "md=${OUT_MD}" >> "$GITHUB_OUTPUT"

      - name: Convert MD -> HTML
        run: |
          python scripts/md_to_html.py "output/${{ inputs.title }}.md" "output/${{ inputs.title }}.html"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.title }}-artifacts
          path: |
            output/${{ inputs.title }}_master.csv
            output/${{ inputs.title }}_master.json
            output/${{ inputs.title }}_fetch_stats.json
            output/${{ inputs.title }}.md
            output/${{ inputs.title }}.html
